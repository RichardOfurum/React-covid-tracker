{"version":3,"sources":["InfoBox.jsx","util.jsx","Map.jsx","Table.jsx","LineGraph.jsx","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9754bc9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from \"react\";\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React, {useState, useEffect} from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from 'numeral'; \r\n\r\nconst options =  {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const buildChartData = (data, casesType = \"cases\") =>{\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for(let date in data.cases){\r\n        if (lastDataPoint) {\r\n           const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n           }\r\n           chartData.push(newDataPoint)\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    };\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({casesType = \"cases\"}) {\r\n\r\n    const [data, setData] = useState({});\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () =>{\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((data) =>{\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n                // console.log(chartData);  \r\n            });\r\n        }\r\n\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                data={{\r\n                    datasets: [\r\n                    {\r\n                        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                        borderColor: \"#CC1034\",\r\n                        data: data,\r\n                    },\r\n                    ],\r\n                }}\r\n                options={options}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { Button, FormControl, MenuItem, Select, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from './LineGraph';\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] =useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  console.log(casesType);\n\n  useEffect(() =>{\n      fetch(`https://disease.sh/v3/covid-19/all`)\n      .then(response => response.json())\n      .then(data => {\n          setCountryInfo(data);\n      })\n  }, [])\n  \n  const url = `https://disease.sh/v3/covid-19/countries`;\n  // `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n  // State is how to write a variable in react;\n\n  // USE EFFECT  = RUNS  ap piesce of code based on a given condition\n  useEffect(() =>{\n      //async -> sends a request to the server, wait for it, then do something with the info\n      const getCountriesData= async () =>{\n          await fetch(url)\n          .then((response) => response.json())\n          .then(data => {\n              const countries = data.map((country) =>({\n                    name: country.country, // United state, united kingdom\n                    value: country.countryInfo.iso2 //UK, USA, FR\n                  }));\n\n                  const sortedData = sortData(data);\n                  setTableData(sortedData);\n                  setMapCountries(data);\n                  setCountries(countries);\n          });\n      };\n\n      getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n      const countryCode = event.target.value;\n      // setCountry(countryCode);\n\n      const url = countryCode === \"worldwide\"\n           ?  `https://disease.sh/v3/covid-19/all`\n           :  `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n      await fetch(url)\n        .then(response => response.json())\n        .then((data) =>{\n            setCountry(countryCode);\n            setCountryInfo(data);\n\n            if(url === `https://disease.sh/v3/covid-19/all`){\n                // alert('yes');\n                setMapCenter([34.80746, -40.4796]);\n            }else{\n              setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n            }\n            \n            setCountryInfo(data);\n            setMapZoom(4);\n\n            console.log(data);\n        });\n  };\n\n  console.log(countryInfo);\n\n  return (\n    <div className=\"App\">\n      \n        <div className=\"app__left\">\n            <div className=\"app_header\">\n                <h1> COVID 19 TRACKER</h1>\n\n                <FormControl className=\"app_dropdown\">\n                  <Select\n                    variant=\"outlined\"\n                    value={country}\n                    onChange={onCountryChange}\n                  >\n                    <MenuItem value=\"worldwide\"> WorldWide </MenuItem>\n                    {\n                        countries.map(country =>(\n                            <MenuItem value={country.value}> {country.name} </MenuItem>\n                        ))\n                    }\n                    \n                  </Select>\n                </FormControl>\n            </div>\n            \n            {/* <Button color=\"primary\">Hello World</Button> */}\n\n            <div className=\"app_stats\">\n                <InfoBox \n                    onClick={(e) => setCasesType(\"cases\")}\n                    \n                    active={casesType === \"cases\"}\n                    title=\"CoronaVirus Cases\" \n                    isRed\n                    cases={prettyPrintStat(countryInfo.todayCases)}\n                    total={numeral(countryInfo.cases).format(\"0.0a\")}\n                />\n                <InfoBox \n                    onClick={(e) => setCasesType(\"recovered\")}\n                    title=\"Recovered\"\n                    active={casesType === \"recovered\"}\n                    cases={prettyPrintStat(countryInfo.todayRecovered)}\n                    total={numeral(countryInfo.recovered).format(\"0.0a\")}\n                />\n                {/* <InfoBox title=\"Tests\" cases={countryInfo.tests} total={6000} /> */}\n                <InfoBox \n                    onClick={(e) => setCasesType(\"deaths\")}\n                    title=\"Deaths\"\n                    isRed\n                    active={casesType === \"deaths\"}\n                    cases={prettyPrintStat(countryInfo.todayDeaths)}\n                    total={numeral(countryInfo.deaths).format(\"0.0a\")}\n                />\n        \n            </div>\n\n            <Map\n              countries={mapCountries}\n              casesType={casesType}\n              center={mapCenter}\n              zoom={mapZoom}\n            />\n\n            \n        </div>\n\n        <Card className=\"app__right\">\n              <CardContent>\n                <h3>Live Cases By Country</h3>\n\n                <Table countries={tableData}/>\n\n                <h3>WorldWide New {casesType}</h3>\n\n                <LineGraph casesType={casesType}/>\n                      \n              </CardContent>\n        </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}